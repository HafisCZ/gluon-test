package com.mycompany.myapp;

import static com.codename1.ui.CN.*;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.List;

import com.codename1.components.MediaPlayer;
import com.codename1.components.SpanLabel;
import com.codename1.ui.Button;
import com.codename1.ui.Dialog;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Container;
import com.codename1.ui.FontImage;
import com.codename1.ui.PickerComponent;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextComponent;
import com.codename1.ui.Toolbar;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.TextModeLayout;
import com.codename1.ui.validation.GroupConstraint;
import com.codename1.ui.validation.LengthConstraint;
import com.codename1.ui.validation.RegexConstraint;
import com.codename1.ui.validation.Validator;
import com.codename1.io.Log;
import com.codename1.io.NetworkEvent;
import com.codename1.io.Preferences;
import com.codename1.io.Storage;
import com.codename1.location.LocationManager;
import com.codename1.media.Media;
import com.codename1.media.MediaManager;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

	private static String TEMP;
    static {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < 8; i++) {
            stringBuilder.append("XExySdG2i95moEBwKfYa0YJsjEU9krPbfxpoyZcIKbZpvonwxIi3xIeh1qMGJbPsCCAjCXrOmRB3zaPPrcnSmPkkN3b05pNT6JQgiuiv7VdJEHkWoxkKml1mAYtsBN95");
        }
      //  TEMP = stringBuilder.toString();
        TEMP = "ABCDABCDABCDABCD";
    }

    public Test testFileWrite (String string, int loops) {
        return new Test((accept) -> {
            long begin = System.currentTimeMillis();
            for (int i = 0; i < loops; i++) {
                try {
                	OutputStreamWriter os = new OutputStreamWriter(Storage.getInstance().createOutputStream("a.txt"));
                	os.write(string);
                	os.close();
                } catch (Exception e) {
                    accept.accept(e.getMessage());
                }
            }
            accept.accept(System.currentTimeMillis() - begin);
        }).repeat(100);
    }

    public Test testFileRead (String string, int loops) {
        return new Test((accept) -> {
            long begin = System.currentTimeMillis();
            for (int i = 0; i < loops; i++) {
                try {
                    InputStreamReader inputStreamReader = new InputStreamReader(Storage.getInstance().createInputStream("a.txt"));
                    String str = inputStreamReader.toString();
                    inputStreamReader.close();
                } catch (Exception e) {
                    accept.accept(e.getMessage());
                }
            }
            accept.accept(System.currentTimeMillis() - begin);
        }).repeat(100);
    }

    public Test testPreferencesWrite (String string, int loops) {

        return new Test((accept) -> {
            long begin = System.currentTimeMillis();

            for (int i = 0; i < loops; i++) {
            
            	Preferences.set("a", string);
            	
            }
            accept.accept(System.currentTimeMillis() - begin);
        }).repeat(100);
    }

    String TESAFF;
    
    public Test testPreferencesRead (String string, int loops) {
        return new Test((accept) -> {
            long begin = System.currentTimeMillis();
            for (int i = 0; i < loops; i++) {
            	TESAFF = Preferences.get("a", "");
            }
            accept.accept(System.currentTimeMillis() - begin);
        }).onExit(() -> {
            
        }).repeat(100);
    }

    public Test testVibration () {
        return new Test((accept) -> {
           long begin = System.currentTimeMillis();
           Display.getInstance().vibrate(500);
           accept.accept(System.currentTimeMillis() - begin);
        }).repeat(100);
    }

    public Test testAudioPlay (int mid) {
        return new Test((accept) -> {
            long begin = System.currentTimeMillis();

            try {
            	Media m = MediaManager.createMedia((Display.getInstance().getResourceAsStream(getClass(), "/s.mp3")), "audio/mpeg");
                m.play();
            } catch (Exception e) {
            	accept.accept(e.getMessage());
            }
            
            accept.accept(System.currentTimeMillis() - begin);
        }).repeat(1);
    }

    public Test testAckermann (int a, int b) {
        return new Test((accept) -> {
            long begin = System.currentTimeMillis();
            Test.Ackermann(a, b);
            accept.accept(System.currentTimeMillis() - begin);
        }).repeat(100);
    }

    public void print(String name, Test.TestResults results) {
    	System.out.println(name + "\nMIN: " + results.min +  " MAX: " + results.max + " AVG: " + results.average + " MED: " + results.median);
    }

    public void progress(List<Double> l, int d) {
      bio.setText("" + (int)(100.0 * (double)l.size() / (double)d) + " %");
    }
	
    private Form current;
    private Resources theme;

    private Form home;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    TextArea nameff;
	Label bio;

    public void start() {
        if (current != null) {
            current.show();
            return;
        }

        TextModeLayout tm = new TextModeLayout(4, 2);
        home = new Form("Home", new BorderLayout());
        Container content = new Container(tm);
        content.add(tm.createConstraint().horizontalSpan(2), new SpanLabel("This form adapts to OS differences in iOS and Android"));
        
        bio = new Label(" s");
        content.add(tm.createConstraint().horizontalSpan(2), bio);
        
        nameff = new TextArea();
        nameff.setRows(30);
        content.add(tm.createConstraint().horizontalSpan(2), nameff);

        content.setScrollableY(true);
        
        Button submit = new Button("Submit");
        FontImage.setMaterialIcon(submit, FontImage.MATERIAL_DONE);
        submit.addActionListener(e -> {
        	new Thread(() -> {
        		
                testPreferencesWrite(TEMP, 1000).onFinished((Test.TestResults a) -> {
                    print("PrefsWrite 1000 @ 1KB (100 samples)", a);
                }).onProgress(this::progress).execute();
                testPreferencesRead(TEMP, 1000).onFinished((Test.TestResults b) -> {
                    print("PrefsRead 1000 @ 1KB (100 samples)", b);
                }).onProgress(this::progress).execute();
                testFileWrite(TEMP, 1000).onFinished((Test.TestResults c) -> {
                    print("FileWrite 100 @ 1KB (100 samples)", c);
                }).onProgress(this::progress).execute();
                testFileRead(TEMP, 1000).onFinished((Test.TestResults d) -> {
                    print("FileRead 100 @ 1KB (100 samples)", d);
                }).onProgress(this::progress).execute();
                testVibration().onFinished((Test.TestResults f) -> {
                    print("Vibration (100 samples)", f);
                }).onProgress(this::progress).execute();
                testAudioPlay(5).onFinished((Test.TestResults g) -> {
                    print("AudioPlay (100 samples)", g);
                }).onProgress(this::progress).execute();
                testAckermann(3, 9).onFinished((Test.TestResults h) -> {
                    print("Ackermann 3/9 (100 samples)", h);
                }).onProgress(this::progress).execute();
        	}).start();
  

        });
        
        home.add(CENTER, content);
        home.add(SOUTH, submit);
        home.show();
    }
    
    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
